{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>This repository contains the code for the UWF Situation Awareness Medusa Application.  This code takes HTTP requests from the Instructor web portal and the mobile application</p>"},{"location":"#features","title":"Features","text":"<ul> <li>RESTful API with CRUD operations</li> <li>Connection to a relational database using Sequelize package</li> <li>Express as the web framework for easy route handling</li> <li>Logging Feature using Winston and Express-Winston package</li> <li>File downloading and uploading through S3</li> <li>File compression</li> </ul>"},{"location":"#uwfits-server-api-overview","title":"UWFITS-Server (API) Overview","text":"<p>Programming wise this uses ExpressJS that greatly simplifies the routing of HTTP requests. Each topic for routing is grouped in its <code>./api/routes</code> which specifies the kind of HTTP request and the route, and typically has the whole code but if it is a more complex request it may be factored out.</p> <p>This uses a mysql database within a container as well as PhpMyAdmin as a dead simple way to work with the database using a GUI.</p> <p>The database is connected through Sequelize, a very high level ORM. Models (tables) are defined under <code>./api/models</code> and to do joins require it to be done in javascript, under <code>./config/models.js</code>. Don't do stupid stuff like take the response of a query and then loop over an await. Lean on the ORM and mysql.</p> <p>Audio and images may pass through this to and from the S3 bucket, ffmpeg is used to compress to mpeg and webp respectively to save space. Bewarned: older browsers may not support webp and who knows if that huffman table overflow exploit has gotten patched yet.</p> <p>There is also a memoizer for storing the image and audio sound URLs which are signed so they can't be simply available to the public with a public URL.</p> <p>Each user currently has one and only one session at a time, and for each request that needs authorization to do something, there is a small table in the database that keeps track of sessions and maps session cookies from the request to user information a the start of each request.</p>"},{"location":"#medusa-project-overview","title":"Medusa Project Overview","text":"<p>This is an application meant to test situational awareness of medical staff using various scenarios.</p> <p>There is a giant heirarchical tree at the center of the database. Each course has many scenarios which has many parts which has many sagat (questions) which has many answers. In this there are patients attached to each scenario, an image attached to each part, and events attached to each part.</p> <p>There is a gradebook that records each response and upon scenario completion tablulates grades for a scenario.</p>"},{"location":"#project-structure","title":"Project Structure","text":"<pre><code>\n.\n\u251c\u2500\u2500 Dockerfile - Dockerfile for UWFITS-Server image     \n\u251c\u2500\u2500 config/ - Configuration files for server\n\u2502   \u251c\u2500\u2500 auth.js      \n\u2502   \u251c\u2500\u2500 aws.js       \n\u2502   \u251c\u2500\u2500 database.js  \n\u2502   \u251c\u2500\u2500 envsetter.js \n\u2502   \u251c\u2500\u2500 logger.js    \n\u2502   \u251c\u2500\u2500 models.js    \n\u2502   \u251c\u2500\u2500 paginator.js \n\u2502   \u2514\u2500\u2500 session.js     \n\u251c\u2500\u2500 docs/ - Documentation files\n\u2502   \u2514\u2500\u2500 files...\n\u251c\u2500\u2500 server.js - Entrypoint for server\n\u251c\u2500\u2500 api/ - Models, routes, and caching\n\u2502   \u251c\u2500\u2500 memoizer.js \n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2514\u2500\u2500 files...\n\u2502   \u2514\u2500\u2500 routes/\n\u2502       \u2514\u2500\u2500 files...\n\u251c\u2500\u2500 docker/ - Configuration files for deployment test\n\u2502   \u251c\u2500\u2500 docker-compose.yml \n\u2502   \u2514\u2500\u2500 nginx \n\u251c\u2500\u2500 scripts/ - Scripts for development\n\u2502   \u251c\u2500\u2500 build_dev_api.sh     \n\u2502   \u251c\u2500\u2500 download_dev_data.sh helpers.sh           \n\u2502   \u251c\u2500\u2500 setup_aws_profile.sh \n\u2502   \u251c\u2500\u2500 stop_deploy_dev.sh\n\u2502   \u251c\u2500\u2500 deploy_dev.sh        \n\u2502   \u251c\u2500\u2500 export_dev_db.sh     \n\u2502   \u251c\u2500\u2500 run_dev_db.sh        \n\u2502   \u2514\u2500\u2500 setup_s3_env.sh\n\u251c\u2500\u2500 test/ - Test scripts for routes\n\u2502   \u2514\u2500\u2500 files...    \n\u251c\u2500\u2500 mkdocs.yml - Mkdocs artifact\n\u251c\u2500\u2500 package-lock.json - Build artifact\n\u251c\u2500\u2500 node_modules - Build artifact\n\u2514\u2500\u2500 package.json - Build artifact\n</code></pre>"},{"location":"#logging","title":"Logging","text":"<ol> <li> <p>The logging feature uses winston as the logger and express-winston as the middleware</p> </li> <li> <p>All configurations are available in UWFITS-Server/api/logger/logger.js</p> </li> <li> <p>Documentation on how to modify this code is available at https://www.npmjs.com/package/winston. There are many online resources on winston as well since it is very popular</p> </li> <li> <p>All requests/responses are automatically logged in the ServerLogs table in development environment</p> </li> <li> <p>By setting the environment variable LOGS to (info, warn, or error), confidential information will no longer be logged and only messages of \"LOGS\" importance will be logged. This is a custom feature built for production runs of UWFITS-Server, I recommend using LOGS=warn in docker-compose when running on production. </p> </li> </ol>"},{"location":"aws/","title":"AWS","text":"<p>This page describes the S3 bucket configurations, and IAM configurations/setup, and the S3 bucket structure. This is critical to this repository due to the api directly interacting with the S3 bucket for media file support.</p>"},{"location":"aws/#iam-configuration","title":"IAM Configuration","text":"<p>TODO</p> <p>This section has not been written yet</p>"},{"location":"aws/#iam-user-setup","title":"IAM User Setup","text":"<p>TODO</p> <p>This section has not been written yet</p>"},{"location":"aws/#s3-bucket-configuration","title":"S3 bucket Configuration","text":"<ol> <li>Create S3 bucket<ol> <li>Go to AWS Services list and select S3</li> <li>Click create bucket</li> <li>Select configurations - <code>ACLs disabled</code>, <code>block all public access</code>, <code>bucket versioning enabled</code>, <code>SSE-S3 encryption</code> enabled, and <code>bucket key</code> enabled</li> </ol> </li> </ol>"},{"location":"aws/#s3-bucket-structure","title":"S3 Bucket Structure","text":"<p>TODO</p> <p>This section has not been written yet</p>"},{"location":"deployment/","title":"Deployment","text":"<p>This page describes the deployment workflow (CI/CD) of UWFITS-Server specifically. It also gives a general overview of the entire deployment workflow (CI/CD)</p>"},{"location":"deployment/#predeployment","title":"Predeployment","text":"<p>TODO</p> <p>This section has not been written yet</p>"},{"location":"deployment/#github-workflow","title":"Github Workflow","text":"<p>TODO</p> <p>This section has not been written yet</p>"},{"location":"development/","title":"Development","text":"<p>This page describes the various methods for setting up the UWFITS-Server local development environment, the purpose of each script, and steps to further develop the api.</p>"},{"location":"development/#setting-up-environment","title":"Setting Up Environment","text":"Node Version <p>Ensure you use an updated version of node, preferably node 20.2.0. You can utilize the python library <code>nodeenv</code> to easily change your node version</p> ENV_NAME <p>Ensure this environment variable does not conflict with any other developers. It will be the name of your environment directory on the s3 bucket <code>dev/environments/&lt;ENV_NAME&gt;</code></p> <ol> <li>Create the .env file and utilize .env_empty for template. Set all environment variables (Be extremely cautious with ENV_NAME and ensure it is kept)<ul> <li>The AWS Environment variables will be to the IAM dev user, and will be provided by the AWS Admin (Dr. Reicherzer). The AWS_USER_KEY is the IAM User's secret access key (the names are swapped by the multer library) </li> </ul> </li> <li>Download AWS CLI V2 (utilize preferred package manager)</li> <li>Utilize the <code>setup_aws_profile.sh</code> script to setup the AWS CLI V2 medusa User (The access key names are not swapped, like previously)</li> <li>Utilize the <code>setup_s3_env.sh</code> script to setup the S3 environment</li> <li>Utilize the <code>download_dev_data.sh</code> script to download the development data from the S3 bucket</li> <li>Utilize the <code>run_dev_db.sh</code> script to run the mysql database</li> <li>Run <code>npm i</code> to install node libraries</li> <li>Run <code>npm run dev</code> to start node server</li> </ol>"},{"location":"development/#development-scripts","title":"Development Scripts","text":"<pre><code>\nscripts/\n\u251c\u2500\u2500 build_dev_api.sh     \n\u251c\u2500\u2500 download_dev_data.sh helpers.sh           \n\u251c\u2500\u2500 setup_aws_profile.sh \n\u251c\u2500\u2500 stop_deploy_dev.sh\n\u251c\u2500\u2500 deploy_dev.sh        \n\u251c\u2500\u2500 export_dev_db.sh     \n\u251c\u2500\u2500 run_dev_db.sh        \n\u2514\u2500\u2500 setup_s3_env.sh\n</code></pre> Script Name Description Prerequisites <code>build_dev_api.sh</code> Builds API image used in <code>docker/docker-compose.yml</code> for pre-deployment check and by <code>UWFITS-Instructor</code> repo for development - .env file must be created and populated properly <code>download_dev_data.sh</code> Downloads development data (<code>dump.sql</code>) from S3 bucket for MySQL database - AWS CLI V2 must be installed- Medusa user must be set up (use <code>setup_aws_profile.sh</code>) <code>helpers.sh</code> Helper functions for all script files None specified <code>setup_aws_profile.sh</code> Sets up AWS profile for authentication with S3 bucket for development scripts - Authentication credentials for IAM Development user (provided by AWS Admin) <code>stop_deploy_dev.sh</code> Stops and removes the docker stack created by <code>deploy_dev.sh</code> None specified <code>deploy_dev.sh</code> Creates and deploys docker stack for pre-deployment check - API development environment must be set up- <code>medusa-api-dev</code> image must be built- No process running on port 80- Medusa instructor portal must be built <code>export_dev_db.sh</code> Exports database to <code>$HOME/medusa/mysql/backup/</code> - <code>medusa-db-dev</code> container must be running <code>run_dev_db.sh</code> Runs development database with default configuration for <code>npm run dev</code> - <code>$HOME/medusa/mysql/</code> directory must be created and populated <code>setup_s3_env.sh</code> Creates environment directory in S3 bucket and uploads default image and audio files - AWS CLI V2 must be installed- .env file must be created and populated- Medusa user must be set up"},{"location":"development/#development-process","title":"Development Process","text":"<p>After setting up the development environment, and making code changes ensure the dev database container is running (<code>medusa-db-dev</code>) then run <code>npm run dev</code>. With the server running use an application such as Postman to test routes.</p>"},{"location":"development/#testing","title":"Testing","text":"<p>Status</p> <p>It isn't thorough (or entirely up to date) however its a good start.</p> <p>Ensure the server is running, and from a seperate terminal run <code>npm run test</code> to run tests. </p>"},{"location":"development/#saving-db-progress","title":"Saving db progress","text":"<p>After backing up the database to use the data in a new database image, simply move the backup from the <code>$HOME/medusa/mysql/backups</code> directory to the <code>$HOME/medusa/mysql/entrypoint</code> directory and remove other files.</p> <ol> <li>Utilize the <code>export_dev_db.sh</code> to export a timestamped .sql file to the <code>$HOME/medusa/mysql/backups</code> directory</li> </ol>"},{"location":"development/#migrations","title":"Migrations","text":"<p>TODO</p> <p>This section has not been written yet</p>"},{"location":"development/#documentation-mkdocs","title":"Documentation (MKDocs","text":"<p>TODO</p> <p>This section has not been written yet</p>"},{"location":"routes/","title":"Routes","text":"<p>This page describes each route available through the api, it's method, permission level, url route, url parameters, body parameters, and description.</p> <p>Many routes support pagination, look for <code>pagination supported</code> tag</p>"},{"location":"routes/#courses-courses","title":"Courses /courses","text":"Sub-URL Permission Method URL Params Body Params Description Notes / instructor, admin GET none none Gets all courses Pagination supported /unregistered user, instructor, admin GET none none Gets user's unregistered courses Mobile /registered user, instructor, admin GET none none Gets user's registered courses Mobile /published instructor, admin GET none none Gets all published courses /unpublished instructor, admin GET none none Gets all unpublished courses /:course_id user, instructor, admin GET none course_id Gets course by course_id /create instructor, admin POST none name, description, is_published Creates new course given parameters /edit instructor, admin PATCH none name, description, is_published, course_id Updates course given parameters /add user, instructor, admin POST none course_id Registers user for course Mobile /remove user, instructor, admin DELETE none course_id Unregisters user from course Mobile /completed user, instructor, admin GET none none Gets all courses that are flagged \"is_completed\" for a user in UserCourse_Join Mobile /publish instructor, admin PATCH none course_id Sets is_published to true /unpublish instructor, admin PATCH none course_id Unpublishes course /:course_id instructor, admin DELETE course_id none Deletes course"},{"location":"routes/#parts-parts","title":"Parts /parts","text":"Sub-URL Permission Method URL Params Body Params Description /:part_id user, instructor, admin GET part_id none Gets part by id /scenario/:scenario_id user, instructor, admin GET scenario_id none Gets scenario by id /nextOrderVal/:scenario_id instructor, admin GET scenario_id none Gets next \"order\" field for a new part /create instructor, admin POST none order, time, description, scenario_id, image_id Creates part using body params /edit instructor, admin PATCH none order, time, description, scenario_id, image_id, part_id Edits part using body params /reorder instructor, admin PATCH none <code>{orders : [{order: number, part_id}]}</code> Sets new orders for each part in a scenario /:part_id instructor, admin DELETE part_id none Deletes part given part_id"},{"location":"routes/#scenarios-scenarios","title":"Scenarios /scenarios","text":"Sub-URL Permission Method URL Params Body Params Description Notes /load/:scenario_id user, instructor, admin GET scenario_id none Loads scenario and everything associated with scenario Mobile / instructor, admin GET none none Retrieves all scenarios Pagination supported /:scenario_id user, instructor, admin GET scenario_id none Gets scenario by scenario_id /course/:course_id user, instructor, admin GET course_id none Gets all scenarios by associated course_id Mobile /create instructor, admin POST none name, description, difficulty, course_id Creates scenario given body params /edit instructor, admin PATCH none scenario_id, name, description, difficulty, course_id Edits scenario given body params /:scenario_id instructor, admin DELETE scenario_id none Deletes scenario given scenario_id"},{"location":"routes/#patients-patients","title":"Patients /patients","text":"Sub-URL Permission Method URL Params Body Params Description / user, instructor, admin GET none none Gets all patients /:patient_id user, instructor, admin GET patient_id none Gets patient by patient_id /create instructor, admin POST none name Creates patient given name /edit instructor, admin PATCH none patient_id, name Edits patient given name and id /:patient_id instructor, admin DELETE patient_id none Deletes patient given id"},{"location":"routes/#users-users","title":"Users /users","text":"Sub-URL Permission Method URL Params Body Params Description Notes / admin GET none none Gets all users and user info /adminToken admin GET none none Creates admin token (used to create admin accounts, valid for 10 days) /instructorToken admin GET none none Creates instructor token (used to create instructor accounts, valid for 10 days) /register none POST none email, password, first_name, last_name, token Creates user account, if valid token exists they will be given permissions associated with token Mobile/web /login none POST none email, password Logs in user to existing account Mobile/web /logout user, instructor, admin POST none none Logs user out and destroys session Mobile/web /delete user, instructor, admin DELETE none none Deletes account of currently logged in user Mobile/web"},{"location":"routes/#images-images","title":"Images /images","text":"Sub-URL Permission Method URL Params Body Params Description Notes / instructor, admin GET none none Gets all images (records, not images themselves) Pagination supported /:image_id user, instructor, admin GET image_id none Gets image based on image_id (actual image, not record) Mobile/web /patient/:patient_id user, instructor, admin GET patient_id none Gets all images based on patient ID (records, not images themselves) /upload instructor, admin POST none none Takes image file from form-data and posts it to EC2 instance, and creates a record for that image (part 1/2 of request) /upload/metadata instructor, admin PATCH none image_id, patient_id Adds metadata to a previously uploaded image (part 2/2 of request) /:image_id instructor, admin DELETE image_id none Deletes the image record (will soon delete image from EC2 as well, still work in progress)"},{"location":"routes/#vitals-vitals","title":"Vitals /vitals","text":"Sub-URL Permission Method URL Params Body Params Description /scenario/:scenario_id user, instructor, admin GET scenario_id none Gets all vitals associated with a scenario /:vitals_id user, instructor, admin GET vitals_id none Gets vitals by vitals_id /create instructor, admin POST none scenario_id, type, value Creates vitals based on body params /create/multiple instructor, admin POST none Array of vitals objects (scenario_id, type, value) Creates multiple vitals based on body params array /edit instructor, admin PATCH none vitals_id, scenario_id, type, value Creates new vitals based on body params /:vitals_id instructor, admin DELETE vitals_id none Deletes vitals based on vitals_id"},{"location":"routes/#events-events","title":"Events /events","text":"Sub-URL Permission Method URL Params Body Params Description /types user, instructor, admin GET none none Returns all event types /:event_id user, instructor, admin GET event_id none Returns event and associated event type of event_id /type/:event_type_id user, instructor, admin GET event_type_id none Returns event type object of event_type_id /part/:part_id user, instructor, admin GET part_id none Gets all events and associated event types for part_id /create instructor, admin POST none part_id, event_type_id, value, time, descriptive_name Creates an event based on body params /edit instructor, admin PATCH none event_id, part_id, event_type_id, value, time, descriptive_name Updates an event based on body params /type/create instructor, admin POST none descriptive_name Creates an event type based on body params /type/edit instructor, admin PATCH none descriptive_name, event_type_id Updates an event type based on body params /:event_id instructor, admin DELETE event_id none Deletes an event based on event_id /type/:event_type_id instructor, admin DELETE event_type_id none Deletes an event type and all associated events"},{"location":"routes/#sagats-sagats","title":"Sagats /sagats","text":"Sub-URL Permission Method URL Params Body Params Description /types user, instructor, admin GET none none Gets all sagat query types /:sagat_id user, instructor, admin GET sagat_id none Gets sagat query based on sagat_id /part/:part_id user, instructor, admin GET part_id none Gets all sagat queries and answers based on part_id /answers/:sagat_id user, instructor, admin GET sagat_id none Gets sagat answers based on sagat_id /query/create instructor, admin POST none part_id, text, sagat_level, sagat_type_id Creates sagat query based on body params /query/edit instructor, admin POST none sagat_id, part_id, text, sagat_level, sagat_type_id Updates sagat query based on body params /answer/create instructor, admin POST none sagat_id, text, correct_answer Creates sagat answer based on body params /answer/edit instructor, admin PATCH none answer_id, sagat_id, text, correct_answer Edits sagat answer based on body params /type/create instructor, admin POST none descriptive_name Creates sagat query type based on body params /submit user, instructor, admin POST none sagat_id, user_answers Creates a grade for the user based on answers"},{"location":"routes/#prompts-prompts","title":"Prompts /prompts","text":"Sub-URL Permission Method URL Params Body Params Description Notes / instructor, admin GET none none Gets all prompts Pagination supported /categories user, instructor, admin GET none none Gets all prompt categories /:prompt_id user, instructor, admin GET prompt_id none Returns prompt and prompt type based on prompt_id /categories/:category_id user, instructor, admin GET category_id none Gets prompt category by category_id /part/:part_id user, instructor, admin GET part_id none Gets all prompts and prompt categories for part_id /create instructor, admin POST none text, answer, part_id, category_id Creates prompt based on body params /edit instructor, admin PATCH none prompt_id, text, answer, part_id, category_id Edits prompt based on body params /category/create instructor, admin POST none descriptive_name Creates prompt category based on body params /category/edit instructor, admin PATCH none descriptive_name, category_id Edits category based on body params /:prompt_id instructor, admin DELETE prompt_id none Deletes prompt based on prompt"},{"location":"routes/#sounds-sounds","title":"Sounds /sounds","text":"Sub-URL Permission Method URL Params Body Params Description Notes / user, instructor, admin GET none none Gets all sounds and sound types (not the actual sound files) Pagination supported /:sound_id user, instructor, admin GET sound_id none Gets the sound from the S3 instance based on the sound ID (actual sound, not the record) Mobile/web /types/:sound_type_id user, instructor, admin GET sound_type_id none Gets the sound type based on the sound type ID /upload instructor, admin POST none none Uploads the sound file to the S3 instance and creates a sound record /upload/metadata instructor, admin PATCH none sound_id, descriptive_name, sound_type_id Adds metadata to the previously created sound record /types/edit/:sound_type_id instructor, admin PATCH sound_type_id none Updates the record in the sound type table In development /edit/:sound_id instructor, admin PATCH sound_id none Updates the sound file and/or sound description on the S3 instance and database In development /:sound_id instructor, admin DELETE sound_id none Deletes the sound record and sound file In development"},{"location":"routes/#clipboard-clipboard","title":"Clipboard /Clipboard","text":"Sub-URL Permission Method URL Params Body Params Description Notes / user, instructor, admin POST none message, scenario_id Creates a clipboard record based on the provided body parameters Mobile"},{"location":"routes/#treatment-treatment","title":"Treatment /Treatment","text":"Sub-URL Permission Method URL Params Body Params Description Notes / user, instructor, admin POST none treatment_type, treatment1, treatment2, scenario_id Creates a treatment record based on the provided body parameters Mobile"},{"location":"routes/#applogger-applog","title":"AppLogger /AppLog","text":"Sub-URL Permission Method URL Params Body Params Description Notes /log user, instructor, admin POST none level, message Add user interaction event Mobile"}]}